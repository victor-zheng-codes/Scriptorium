import prisma from '../../../utils/prisma-client'
import bcrypt from 'bcrypt';

const JWT_SALT = parseInt(process.env.JWT_SALT) || 10; // should be an int

// Validation helper functions generated by ChatGPT
// Portions of the file were generated by ChatGPT with modification
function isValidPassword(password) {
    // Minimum length of 8, 
    // at least one uppercase letter, one lowercase letter, one number, and one special character
    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&_])[A-Za-z\d@$!%*?&_]{8,}$/;
    return passwordRegex.test(password);
}

function isValidEmail(email) {
    // General email validation
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email);
}

function isValidUsername(username) {
  // Only alphanumeric characters and underscores allowed
  const usernameRegex = /^[a-zA-Z0-9_]{3,}$/; // Minimum length of 3
  return usernameRegex.test(username);
}

function isValidName(name) {
  const nameRegex = /^[a-zA-ZÀ-ÿ\s-]+$/;
  return nameRegex.test(name);
}
  
export default async function handler(req, res) {
  if (req.method === 'POST') {
    const { email=null, username=null, password=null, firstName=null, lastName=null } = req.body;

    // Validate password
    if (password === null || !isValidPassword(password)) {
      return res.status(400).json({ error: 'Password must be at least 8 characters long, contain an uppercase letter, a lowercase letter, a number, and a special character.' });
    }

    // Validate email
    if (email === null || !isValidEmail(email)) {
      return res.status(400).json({ error: 'Must use a valid email.' });
    }

    // Validate username
    if (username === null || !isValidUsername(username)) {
      return res.status(400).json({ error: 'Username must be at least 3 characters long and can only contain alphanumeric characters and underscores.' });
    }

    // Validate firstName
     if (firstName === null || !isValidName(firstName)) {
      return res.status(400).json({ error: 'Invalid first name format.' });
    }

    // Validate lastName
     if (lastName === null || !isValidName(lastName)) {
      return res.status(400).json({ error: 'Invalid last name format.' });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, JWT_SALT);

    try {
      const user = await prisma.user.create({
        data: {
          email,
          username,
          password: hashedPassword,
          firstName,
          lastName
        },
      });
      const { password: _, refreshToken: _2, ...userResponse } = user; // create the userResponse to omit the password

      res.status(201).json({ message: 'User created', user: userResponse });

    } catch (error) {
        if (error.code === 'P2002') { // Prisma's unique constraint error code
          // checks if the uniqueness error was caused by the email or username 
          if (error.meta.target.includes('email')) {
            return res.status(409).json({ error: 'Email already in use.' });
          }
          if (error.meta.target.includes('username')) {
            return res.status(409).json({ error: 'Username already in use.' });
          }
        } else {
          console.log(error)
          return res.status(500).json({ error: 'Error creating user' });
        }
    }
  } else {
    res.setHeader('Allow', ['POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
