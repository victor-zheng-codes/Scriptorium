import { verifyToken } from '../../../utils/auth'
import prisma from '../../../utils/prisma-client'

// Portions of the file were generated by ChatGPT with modification
export default async function handler(req, res) {
  if (req.method === 'POST') {
    const authHeader = req.headers.authorization;

    // Validate that the user is authenticated
    if (!authHeader) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
  
    // Check if the header is in Bearer token format
    const [scheme, token] = authHeader.split(' ');
    
    if (scheme !== 'Bearer' || !token) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
  
    // Proceed with token verification
    let tokenVerificationResult = verifyToken(token);
    // Check if the token is valid
    if (tokenVerificationResult === null) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const user = await prisma.user.findUnique({ where: { userId: tokenVerificationResult } });

    if (user.refreshToken === null) {
      return res.status(400).json({ error: 'User already logged out' });
    }

    try {
      // Clear their refresh token
      await prisma.user.update({
        where: { userId: tokenVerificationResult },
        data: { refreshToken: null }
      });

      return res.status(200).json({ message: 'Logged out successfully' });
    } catch (error) {
      console.error(error);
      return res.status(500).json({ error: 'Error logging out' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    return res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}