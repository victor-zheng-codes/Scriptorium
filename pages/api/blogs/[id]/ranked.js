import prisma from '../../../../utils/prisma-client'
import { isValidId } from '../../../../utils/validation';

export default async function handler(req, res) {
    if (req.method !== "GET") {
        res.setHeader('Allow', ['GET']);
        return res.status(405).json({ error: `Method ${req.method} not allowed` });
    }

    const { order = "upvotes", ascending = "true" } = req.query;
    // order is either "upvotes" or "downvotes"
    // ascending is either "true" or "false"
    let blogId = req.query.id;
    if (!blogId || !isValidId(blogId)) {
        return res.status(400).json({ error: "Invalid blog ID" });
    }
    blogId = Number(blogId);
    if (order !== "upvotes" && order !== "downvotes") {
        return res.status(400).json({ error: "order must be either 'upvotes' or 'downvotes'" });
    }
    if (ascending !== "true" && ascending !== "false") {
        return res.status(400).json({ error: "ascending must be either 'true' or 'false'" });
    }

    // Code to construct orderBy object generated by ChatGPT
    const orderBy = {
        [order]: ascending === "true" ? 'asc' : 'desc',
    }

    try {
        // Get the comments in order of given criteria
        const rankedComments = await prisma.comment.findMany({
            where: { blogId },
            orderBy,
        });
        return res.status(200).json({ rankedComments });
    } catch (error) {
        console.log(error);
        return res.status(500).json({ error: "Error fetching from database" });
    }
}
