import { authenticateUser } from '../../../../utils/auth'
import prisma from '../../../../utils/prisma-client'
import { isValidId } from '../../../../utils/validation';

export default async function handler(req, res) {
    // Authenticate user
    let userId = authenticateUser(req);
    if (!userId) {
        return res.status(401).json({ error: "Unauthorized" });
    }

    // Check if method is allowed
    if (req.method !== "POST") {
        res.setHeader('Allow', ['POST']);
        return res.status(405).json({ error: `Method ${req.method} not allowed` });
    }

    const { content } = req.body;
    let { commentId } = req.body;
    let blogId = req.query.id;
    if (!blogId || !isValidId(blogId)) {
        return res.status(400).json({ error: "Invalid blog ID" });
    }
    if (!userId || !isValidId(userId)) {
        return res.status(400).json({ error: "Invalid user ID" });
    }
    if (commentId && !isValidId(commentId)) {
        return res.status(400).json({ error: "Invalid comment ID" });
    }
    if (typeof content !== "string" || content.length == 0) {
        return res.status(400).json({ error: "content must be a non-empty string" });
    }
    blogId = Number(blogId);
    userId = Number(userId);
    commentId = Number(commentId);

    // Code to create comments generated by ChatGPT, with some modification
    try {
        // Check if the blog exists
        const blog = await prisma.blog.findUnique({
            where: { blogId },
        });
        if (!blog) { // Blog does not exist
            return res.status(404).json({ error: `Blog ${blogId} not found` });
        }

        // If replying, check if comment to reply to exists and is on the current blog
        if (commentId) {
            const comment = await prisma.comment.findUnique({
                where: { commentId },
            });
            if (!comment) { // Comment does not exist
                return res.status(404).json({ error: `Comment ${commentId} not found` });
            } else if (comment.blogId !== blogId) { // Comment is not on the current blog
                return res.status(404).json({ error: `Comment ${commentId} is not on blog ${blogId}` });
            }
        }

        // Create the comment
        const newComment = await prisma.comment.create({
            data: {
                userId,
                blogId,
                content,
            },
        });

        // If replying, create a CommentReply to link this comment to another
        if (commentId) {
            const replyId = newComment.commentId;
            const newCommentReply = await prisma.commentReply.create({
                data: {
                    commentId,
                    replyId,
                }
            });
            return res.status(201).json({ newComment, newCommentReply });
        }

        return res.status(201).json({ newComment });
    } catch (error) {
        console.log(error);
        return res.status(500).json({ error: "Error creating comment" });
    }
}
