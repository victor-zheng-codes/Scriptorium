import prisma from '../../../utils/prisma-client';

export default async function handler(req, res) {
    if (req.method !== "GET") {
        res.setHeader('Allow', ['GET']);
        return res.status(405).json({ error: `Method ${req.method} not allowed` });
    }

    const { content, title, author } = req.query;
    let { tags, templates } = req.query;
    // content and title are strings
    // tags is a list of comma-separated template names (strings)
    // templates is a list of comma-separated template names (strings)

    // Pagination code generated by ChatGPT, with some modification
    let { page = 1, limit = 10 } = req.query;
    page = Number(page);
    limit = Number(limit);

    if (page < 1) page = 1; // Ensure page is at least 1
    if (limit < 1) limit = 1; // Ensure limit is at least 1

    const skip = (page - 1) * limit; // Calculate the number of records to skip
    const take = limit; // The number of records to return

    // Function to generate where clause generated by ChatGPT, with some modification
    const buildWhereConditions = () => {
        if (tags){
            tags = tags.split(",").map(function(item) {
              return item.trim();
            }).filter(function(item) {
              return item !== ''; // Remove empty strings
            });
        }
        if (templates){
            templates = templates.split(",").map(function(item) {
              return item.trim();
            }).filter(function(item) {
              return item !== ''; // Remove empty strings
            });
        }
        return [
            content ? { OR: [
                { content: { contains: content } },
                { description: { contains: content } }, 
              ]} : undefined,
            // If content exists, only include blogs whose content or description
            // contains the content string passed in the query (case insensitive)
            title ? { title: { contains: title } } : undefined,
            // If title exists, only include blogs whose title contains
            // the title string passed in the query (case insensitive)
            tags && tags.length > 0 ? {
                AND: tags.map((tag) => ({
                    BlogTags: {
                        some: {
                            tag: {
                                tagName: { contains: tag },
                            },
                        },
                    },
                })),
            } : undefined,            
            // If tags exists and has elements, only include blogs with at least
            // one associated tag whose name is in the tags array (case insensitive)
            templates && templates.length > 0 ? {
                AND: templates.map((template) => ({
                    BlogTemplate: {
                        some: {
                            template: {
                                title: { contains: template },
                            },
                        },
                    },
                }))
            } : undefined,
            author ? { author: { username: { contains: author } } } : undefined,
            // If templates exists and has elements, only include blogs with 
            // at least one associated template whose title is in the
            // templates array (case insensitive)

            { isAppropriate: true }, // Only include blogs with isAppropriate set to true
            { isDeleted: false } // Only include non-deleted blogs
        ].filter(Boolean); // Remove undefined values (from non-existent parameters)
    };
    
    try {
        // Query generated by ChatGPT, with some modification
        const whereConditions = buildWhereConditions();

        const blogs = await prisma.blog.findMany({
            where: {
                AND: whereConditions
            },
            orderBy: [ // Order by upvotes first and then downvotes
                { upvotes: 'desc' },
                { downvotes: 'desc' },
            ],
            include: { // Include the Blog's tags and templates when returning it
                BlogTags: {
                    include: {
                        tag: true, // Include tag info
                    },
                },
                BlogTemplate: {
                    include: {
                        template: true, // Include template info
                    },
                },
                author: {
                    select: {
                        username: true,
                    }
                }
            },
            skip: skip,
            take: take,
        });

        const totalCount = await prisma.blog.count({ // Get the total count to display on the page
            where: {
                AND: whereConditions
            },
        })
        const totalPages = Math.ceil(totalCount / limit); // Calculate total pages

        return res.status(200).json({ blogs, totalCount, totalPages, page, limit });
    } catch (error) {
        console.log(error);
        return res.status(500).json({ error: "Error searching for blogs" });
    }
}